# Autor: Yanpeng Mei
# Created at : 28.01.2022

'''
for B-spline: The knot vector always has m+p+2 monotonically increasing knots
p - degree
m - Number of control points, minus one
'''

import numpy as np
from matplotlib import pyplot as plt
from findspan import findspan
from basisfun import basisfun
from bspderiv import bspderiv
from bspeval import bspeval
from nrbmak import nrbmak
from nrbeval import nrbeval
from nrbplot import nrbplot


# 1. test of findspan
'''
# test 1
n = 3
U = np.asarray([0, 0, 0, 1/2, 1, 1, 1])
p = 2
u = np.linspace(0, 1, 10)
s = findspan(n, p, u, U)
print(s)
print(type(s[0]))
'''

'''
# test 2
p = 2
m = 7
n = m - p - 1
U = np.asarray([0, 0, 0, 1/3, 2/3, 1, 1, 1])
u = np.asarray([ 0,   0.11880,   0.55118,   0.93141,   0.40068,   0.35492, 0.44392,   0.88360,   0.35414,   0.92186,   0.83085,   1])
s = findspan (n, p, u, U)
print(s)
print(type(s[0]))
# s should be [2   2   3   4   3   3   3   4   3   4   4   4]
'''


# 2. test of basisfun
'''
n = 3
U =  np.asarray([0, 0, 0, 1/2, 1, 1, 1])
p = 2
u = np.linspace (0, 1, 10)
s = findspan (n, p, u, U)
print(s)
b = basisfun (s, u, p, U)
print(b)
# B should be [ [1.                   0.                   0.        ]
#                         [0.60493827   0.37037037   0.02469136]
#                         [0.30864198   0.59259259   0.09876543]
#                         [0.11111111   0.66666667   0.22222222]
#                         [0.01234568   0.59259259   0.39506173]
#                         [0.39506173   0.59259259   0.01234568]
#                         [0.22222222   0.66666667   0.11111111]
#                         [0.09876543   0.59259259   0.30864198]
#                         [0.02469136   0.37037037   0.60493827]
#                         [0.                   0.                   1.                ] ]
'''


# 3. test of bspderiv
'''
d = 3
c = np.asarray([ [0, 10, 20, 30, 40, 50],
                          [0, 5, -5, 5, -5, 0] ])
k = np.asarray([0, 0, 0, 0, 1/3, 2/3, 1, 1, 1, 1])
dc, dk = bspderiv(d, c, k)
print('dc = ', dc)
print('dk = ', dk)
print('type of dk is ', type(dk))
# dc should be [[ 90.  45.  30.  45.  90.]
#                        [ 45. -45.  30. -45.  45.]]
# dk should be [0.       0.       0.       0.33333333 0.66666667    1.      1.      1.]
'''


# 4. test of bspeval
'''
d = 3
c = np.asarray([[0, 10, 20, 30, 40, 50],
                         [0, 5,  -5, 5,  -5, 0 ]])
k = np.asarray([0, 0, 0, 0, 1/3, 2/3, 1, 1, 1, 1])
u = np.linspace(0,1,10)
p = bspeval(d,c,k,u)
print(p)
# p should be
#    [[ 0.   8.48765432   14.56790123    19.16666667    23.11728395    26.88271605   30.83333333    35.43209877    41.51234568    50.        ]
#     [ 0.   2.19135802   0.86419753       -0.83333333     -0.58641975      0.58641975   0.83333333       -0.86419753    -2.19135802      0.        ]]
'''


# 5. test of nrbmak
# test 1
'''
cp_cur = np.asarray([[0.5, 1.5, 4.5, 3.0, 7.5, 6.0, 8.5],
                                  [3.0, 5.5, 5.5, 1.5, 1.5, 4.0, 4.5]])
knot = ([0, 0, 0, 1/4, 1/2, 3/4, 3/4, 1, 1, 1], )
crv = nrbmak(cp_cur, knot)
print(crv)
'''

'''
# test 2
cp_sur = np.zeros((3,5,5))
cp_sur[:,:,0] = [ [0.0,  3.0,  5.0,  8.0, 10.0],
                         [0.0,  0.0,  0.0,  0.0, 0.0],
                         [2.0,  2.0,  7.0,  7.0,  8.0] ]
cp_sur[:,:,1] = [ [0.0,  3.0,  5.0,  8.0, 10.0],
                         [3.0,  3.0,  3.0,  3.0,  3.0],
                         [0.0,  0.0,  5.0,  5.0,  7.0] ]
cp_sur[:,:,2] = [ [0.0,  3.0,  5.0,  8.0, 10.0],
                         [5.0,  5.0,  5.0,  5.0,  5.0],
                         [0.0,  0.0,  5.0,  5.0,  7.0] ]
cp_sur[:,:,3] = [ [0.0,  3.0,  5.0,  8.0, 10.0],
                         [8.0,  8.0,  8.0,  8.0,  8.0],
                         [5.0,  5.0,  8.0,  8.0, 10.0] ]
cp_sur[:,:,4] = [ [0.0,  3.0,  5.0,  8.0, 10.0],
                         [10.0, 10.0, 10.0, 10.0, 10.0],
                         [5.0,  5.0,  8.0,  8.0, 10.0] ]
knots = ([0, 0, 0, 1/3, 2/3, 1, 1, 1], [0, 0, 0, 1/3, 2/3, 1, 1, 1])
srf = nrbmak(cp_sur, knots)
print(srf)
temp1 = srf['CP']
for i in range(5):
    print('srf[\'CP\'] [:, :, ', i, '] = ', temp1[:, :, i])
'''



# 6. test of nrbeval
'''
# test 1
cp_cur = np.asarray([[0.5, 1.5, 4.5, 3.0, 7.5, 6.0, 8.5],
                                  [3.0, 5.5, 5.5, 1.5, 1.5, 4.0, 4.5]])
knot = ([0, 0, 0, 1/4, 1/2, 3/4, 3/4, 1, 1, 1], )
crv = nrbmak(cp_cur, knot)
ut = (list(np.linspace(0,1,10)), )
p = nrbeval(crv, ut)
print(p)
# p sshould be
#[[0.5    1.48765432     2.67283951   3.75                 3.97222222     3.67592593     5.08333333     7.21604938     7.06790123     8.5],
# [3.      4.72839506     5.4691358     5.27777778     4.29012346     2.70987654     1.72222222     2.0308642       3.66049383     4.5],
# [0.       0.                    0.                   0.                     0.                     0.                      0.                    0.                     0.                     0.  ]]
'''
'''
# test 2
cp_sur = np.zeros((3,5,5))
cp_sur[:,:,0] = [ [0.0,  3.0,  5.0,  8.0, 10.0],
                         [0.0,  0.0,  0.0,  0.0, 0.0],
                         [2.0,  2.0,  7.0,  7.0,  8.0] ]
cp_sur[:,:,1] = [ [0.0,  3.0,  5.0,  8.0, 10.0],
                         [3.0,  3.0,  3.0,  3.0,  3.0],
                         [0.0,  0.0,  5.0,  5.0,  7.0] ]
cp_sur[:,:,2] = [ [0.0,  3.0,  5.0,  8.0, 10.0],
                         [5.0,  5.0,  5.0,  5.0,  5.0],
                         [0.0,  0.0,  5.0,  5.0,  7.0] ]
cp_sur[:,:,3] = [ [0.0,  3.0,  5.0,  8.0, 10.0],
                         [8.0,  8.0,  8.0,  8.0,  8.0],
                         [5.0,  5.0,  8.0,  8.0, 10.0] ]
cp_sur[:,:,4] = [ [0.0,  3.0,  5.0,  8.0, 10.0],
                         [10.0, 10.0, 10.0, 10.0, 10.0],
                         [5.0,  5.0,  8.0,  8.0, 10.0] ]
knots = ([0, 0, 0, 1/3, 2/3, 1, 1, 1], [0, 0, 0, 1/3, 2/3, 1, 1, 1])
srf = nrbmak(cp_sur, knots)
ut = list(np.linspace(0, 1, 5))
vt = list(np.linspace(0, 1, 5))
tt = (ut, vt)
p = nrbeval(srf, tt)
for i in range(5):
    print('p [:, :, ', i, '] = ', p[:, :, i])
print(np.shape(p))
'''



# 7. test of nrbplot
'''
# test 1
cp_sur = np.zeros((3,5,5))
cp_sur[:,:,0] = [ [0.0,  3.0,  5.0,  8.0, 10.0],
                         [0.0,  0.0,  0.0,  0.0, 0.0],
                         [2.0,  2.0,  7.0,  7.0,  8.0] ]
cp_sur[:,:,1] = [ [0.0,  3.0,  5.0,  8.0, 10.0],
                         [3.0,  3.0,  3.0,  3.0,  3.0],
                         [0.0,  0.0,  5.0,  5.0,  7.0] ]
cp_sur[:,:,2] = [ [0.0,  3.0,  5.0,  8.0, 10.0],
                         [5.0,  5.0,  5.0,  5.0,  5.0],
                         [0.0,  0.0,  5.0,  5.0,  7.0] ]
cp_sur[:,:,3] = [ [0.0,  3.0,  5.0,  8.0, 10.0],
                         [8.0,  8.0,  8.0,  8.0,  8.0],
                         [5.0,  5.0,  8.0,  8.0, 10.0] ]
cp_sur[:,:,4] = [ [0.0,  3.0,  5.0,  8.0, 10.0],
                         [10.0, 10.0, 10.0, 10.0, 10.0],
                         [5.0,  5.0,  8.0,  8.0, 10.0] ]
knots = ([0, 0, 0, 1/3, 2/3, 1, 1, 1], [0, 0, 0, 1/3, 2/3, 1, 1, 1])
srf = nrbmak(cp_sur, knots)
nrbplot(srf, [50, 25])
plt.show()
'''
'''
# test 2
cp_cur = np.asarray([[0.5, 1.5, 4.5, 3.0, 7.5, 6.0, 8.5],
                                  [3.0, 5.5, 5.5, 1.5, 1.5, 4.0, 4.5]])
knot = ([0, 0, 0, 1/4, 1/2, 3/4, 3/4, 1, 1, 1], )
crv = nrbmak(cp_cur, knot)
nrbplot(crv, 20)
plt.show()
'''
